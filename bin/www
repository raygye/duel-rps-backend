#!/usr/bin/env node

/**
 * Module dependencies.
 */
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();

const app = require('../app');
const debug = require('debug')('duel-rps-backend:server');
const http = require('http');
/**
 * Mongoose setup.
 */
const uri = process.env.ATLAS_URI;
mongoose.connect(uri, {useNewUrlParser:true, useCreateIndex: true, useUnifiedTopology: true});
const connection = mongoose.connection;
connection.once('open', () => {
  console.log('Connection to MongoDB established');
});
let User = require('../models/userSchema');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
/**
 * Game Sockets
 */
let populations = {};
let matchups = {};
const io = require('socket.io')(server);
io.on('connection', (socket) => {
  console.log('user connected');
  socket.on('room', (room) => {
      socket.join(room, function() {
          socket.roomID = room;
          console.log("Socket now in room: " + room);
          if (populations[room] === undefined || populations[room] === 0) {
              populations[room] = 1;
          }
          else if (populations[room] === 1) {
              populations[room]++;
              io.in(room).emit('ready');
          }
          else {
              populations[room]++;
              socket.emit("Full");
          }
          console.log(room + ": " + populations[room]);
      });
  });
  socket.on('disconnect', () => {
    let room = socket.roomID;
    populations[room]--;
    console.log('user disconnected');
    if (populations[room] === 1) {
        io.in(room).emit('waiting');
    }
    console.log(room + ": " + populations[room]);
  });
  socket.on('user', (info) => {
      let room = socket.roomID;
      io.in(room).emit('SecondPlayer', info);
  });
  socket.on('gametime', (room) => {
      io.in(room).emit('start');
  });
  socket.on('lock', (data) => {
      if (matchups[data.room] === undefined || matchups[data.room] === null) {
          matchups[data.room] = "" + data.choice;
          console.log(data.username);
          matchups[data.room+'user1'] = data.username;
          console.log(matchups[data.room+'user1']);
      }
      else {
          let results = {
              tie: false,
              winner: ""
          };
          matchups[data.room] += data.choice;
          matchups[data.room+'user2'] = data.username;
          let p1 = parseInt(matchups[data.room][0].trim(), 10);
          let p2 = parseInt(matchups[data.room][1].trim(), 10);
          if (((p1 > p2 ) && (p2-p1 !== -2)) || (p1-p2 === 2)) {
              results.winner = matchups[data.room+'user1'];
              console.log('winner: ' + results.winner);
          }
          else if (p1===p2) {
              results.tie = true;
          }
          else {
              results.winner = matchups[data.room+'user2'];
              console.log('winner: ' + results.winner);
          }
          matchups[data.room] = null;
          matchups[data.room+'user1'] = null;
          matchups[data.room+'user2'] = null;
          io.in(data.room).emit('results', results);
      }
  })
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Listening on port: ${port}` );
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
